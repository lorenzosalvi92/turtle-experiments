'''
In this script I tried to implement the algorithm described in this tweet https://twitter.com/matthen2/status/1433081884402233347?lang=de

"one way to make a drawing from the digits of a number 
for pi, we draw follow (turn 3, turn 1, turn 4, turn 1, turn 5, turn 9, etc...) where between each turn you move forward 1 step, and 'turn 1' means 'turn 1 tenth of 360Â°'.
it's very obvious which numbers are rational!"

The shapes generated by this algorithm are fascinating.
'''

from decimal import Decimal, getcontext
import numpy as np
import math
from turtle import Turtle, speed, tracer, update, delay, ht, done

decimals = 10001
getcontext().prec = decimals 
number = Decimal(1).exp()
print(number)

digitsArray= []
for i in range(2, decimals+1):
    digitsArray.append(int((str(number))[i]))
    
anglesArray = []
for i in range(0, 10):
    anglesArray.append(np.multiply((np.divide(i,10)),360))

t = Turtle()
tracer(0, 0)
delay(0)
ht()
speed(speed=0)
for i in range(0, len(digitsArray)):
    if digitsArray[i] == 0:
        angle = anglesArray[0]
    elif digitsArray[i] == 1:
        angle = anglesArray[1]
    elif digitsArray[i] == 2:
        angle = anglesArray[2]
    elif digitsArray[i] == 3:
        angle = anglesArray[3]
    elif digitsArray[i] == 4:
        angle = anglesArray[4]
    elif digitsArray[i] == 5:
        angle = anglesArray[5]
    elif digitsArray[i] == 6:
        angle = anglesArray[6]
    elif digitsArray[i] == 7:
        angle = anglesArray[7]
    elif digitsArray[i] == 8:
        angle = anglesArray[8]
    else:
        angle = anglesArray[9]       
    steps = 3
    t.right(angle)
    t.fd(steps)
update()
t.screen.mainloop()
done()


